import { NavLink } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faHome, faEnvelope, faUserShield, 
  faMosque, faBars, faTimes, faUserPlus
} from '@fortawesome/free-solid-svg-icons';
import { useState } from 'react';

export default function Navbar() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  return (
    <nav className="bg-[#004D01] text-white shadow-lg fixed w-full z-50">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo Section */}
          <NavLink 
            to="/" 
            className="flex items-center space-x-2 text-xl font-poppins font-bold hover:text-blue-200 transition-colors"
          >
            <FontAwesomeIcon icon={faMosque} className="text-2xl" />
            <span>Masjid Rahmah</span>
          </NavLink>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-8">
            <div className="flex space-x-6">
              <NavLink 
                to="/" 
                className={({ isActive }) => 
                  `flex items-center space-x-2 px-3 py-2 rounded-md transition-colors ${
                    isActive ? 'bg-white/10 text-blue-300' : 'hover:bg-white/10'
                  }`
                }
              >
                <FontAwesomeIcon icon={faHome} />
                <span>Home</span>
              </NavLink>
              
              <NavLink 
                to="/contact" 
                className={({ isActive }) => 
                  `flex items-center space-x-2 px-3 py-2 rounded-md transition-colors ${
                    isActive ? 'bg-white/10 text-blue-300' : 'hover:bg-white/10'
                  }`
                }
              >
                <FontAwesomeIcon icon={faEnvelope} />
                <span>Contact Us</span>
              </NavLink>
              
              <NavLink 
                to="/admin" 
                className={({ isActive }) => 
                  `flex items-center space-x-2 px-3 py-2 rounded-md transition-colors ${
                    isActive ? 'bg-white/10 text-blue-300' : 'hover:bg-white/10'
                  }`
                }
              >
                <FontAwesomeIcon icon={faUserShield} />
                <span>Admin</span>
              </NavLink>
            </div>

            {/* Registration CTA */}
            <NavLink 
              to="/register" 
              className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 px-4 py-2 rounded-md transition-colors ml-4"
            >
              <FontAwesomeIcon icon={faUserPlus} />
              <span>Register Now</span>
            </NavLink>
          </div>

          {/* Mobile Menu Button */}
          <button 
            className="md:hidden p-2 rounded-md hover:bg-white/10 transition-colors"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            aria-label="Toggle navigation menu"
          >
            <FontAwesomeIcon icon={isMenuOpen ? faTimes : faBars} className="text-xl" />
          </button>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden pb-4 space-y-2">
            <NavLink 
              to="/" 
              className={({ isActive }) => 
                `flex items-center space-x-2 px-4 py-3 rounded-md ${
                  isActive ? 'bg-white/10 text-blue-300' : 'hover:bg-white/10'
                }`
              }
              onClick={() => setIsMenuOpen(false)}
            >
              <FontAwesomeIcon icon={faHome} />
              <span>Home</span>
            </NavLink>
            
            <NavLink 
              to="/contact" 
              className={({ isActive }) => 
                `flex items-center space-x-2 px-4 py-3 rounded-md ${
                  isActive ? 'bg-white/10 text-blue-300' : 'hover:bg-white/10'
                }`
              }
              onClick={() => setIsMenuOpen(false)}
            >
              <FontAwesomeIcon icon={faEnvelope} />
              <span>Contact Us</span>
            </NavLink>
            
            <NavLink 
              to="/admin" 
              className={({ isActive }) => 
                `flex items-center space-x-2 px-4 py-3 rounded-md ${
                  isActive ? 'bg-white/10 text-blue-300' : 'hover:bg-white/10'
                }`
              }
              onClick={() => setIsMenuOpen(false)}
            >
              <FontAwesomeIcon icon={faUserShield} />
              <span>Admin</span>
            </NavLink>

            <NavLink 
              to="/register" 
              className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 px-4 py-3 rounded-md mt-2"
              onClick={() => setIsMenuOpen(false)}
            >
              <FontAwesomeIcon icon={faUserPlus} />
              <span>Register Now</span>
            </NavLink>
          </div>
        )}
      </div>
    </nav>
  );
}





 <Route path="/admin" element={<AdminDashboard />} />








 ///verify payemnt


 export const verifyPayment = async (req: Request, res: Response) => {
  const { txId, plan, amount, currency, email, childId } = req.body; // ðŸ‘ˆ added childId

  try {
    if (txId === "FREE_PLAN") {
      const validityMinutes = 2;
      const subscription = new UserSubscription({
        userEmail: email,
        childId: childId, // ðŸ‘ˆ attach child reference
        plan,
        amountPaid: 0,
        currency,
        paymentStatus: "successful",
        flutterwaveTxId: txId,
        validityInterval: validityMinutes,
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + validityMinutes * 60 * 1000),
      });
      await subscription.save();

      // Optional: directly mark as subscribed for free plan
      await ChildModel.findByIdAndUpdate(childId, { $set: { isSubscribed: true } });

      return res.status(200).json({
        success: true,
        message: `Free plan subscribed successfully (expires in ${validityMinutes} minutes)`,
      });
    }

    const response = await axios.get(
      `https://api.flutterwave.com/v3/transactions/${txId}/verify`,
      { headers: { Authorization: `Bearer ${process.env.FLW_SECRET_KEY}` } }
    );

    const data = response.data.data;
    if (!data || data.status !== "successful" || Number(data.amount) !== Number(amount)) {
      return res.status(400).json({ success: false, message: "Payment verification failed" });
    }

    const validityDays = 365;
    const subscription = new UserSubscription({
      userEmail: email,
      childId: childId, // ðŸ‘ˆ link child to subscription
      plan,
      amountPaid: amount,
      currency,
      paymentStatus: "pending",
      flutterwaveTxId: txId,
      validityInterval: validityDays,
      createdAt: new Date(),
      expiresAt: new Date(Date.now() + validityDays * 24 * 60 * 60 * 1000),
    });
    await subscription.save();

    res.status(200).json({
      success: true,
      message: "Your payment is pending, waiting for confirmation.",
    });
  } catch (err: any) {
    console.error(err.response?.data || err.message);
    res.status(500).json({ success: false, message: "Server error" });
  }
};